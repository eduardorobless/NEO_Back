{"version":3,"sources":["neo.js","reportWebVitals.js","index.js"],"names":["NeoComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","api_key","process","REACT_APP_NASA_API_KEY","start_date","getTodayUTCDate","Date","end_date","state","error","isLoaded","items","currentLocalTime","currentUTCTime","datesubstring","year","month","day","hour","minute","today","dayUTC","getUTCDate","toString","monthUTC","getUTCMonth","yearUTC","getUTCFullYear","length","paddingLeftZeros","format_date","hourUTC","getUTCHours","minUTC","getUTCMinutes","format_time","getTodayUTCTime","dayLocal","getDate","monthLocal","getMonth","yearLocal","getFullYear","hourLocal","getHours","minLocal","getMinutes","getTodayLocalDate","getTodayLocalTime","detectionDate","local","datetime","split","date","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","time","min","parsed_date","UTC","getTodayLocalDateTime","getTodayUTCDateTime","_this2","options","method","url","params","axios","request","then","result","order","reduce","p","v","i","assign","defineProperty","data","sort","a","b","is_potentially_hazardous_asteroid","todaydate","setState","_this3","_this$state","react_default","createElement","message","id","className","map","item","key","name","absolute_magnitude_h","estimated_diameter","kilometers","estimated_diameter_min","estimated_diameter_max","parseDetectionDate","close_approach_data","close_approach_date_full","relative_velocity","kilometers_per_second","miss_distance","React","Component","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","neo"],"mappings":"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","file":"static/js/main.49ca01d3.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\n\nclass NeoComponent extends React.Component {\n\n\n      paddingLeftZeros(datesubstring) {\n        return  \"0\" + datesubstring; \n      }\n\n      format_date(year, month, day) {\n        return year + \"-\" + month + \"-\" + day\n      }\n      format_time(hour, minute) {\n        return hour + \":\" + minute\n      }\n\n      getTodayUTCDate(today) {\n        var dayUTC = today.getUTCDate().toString(); \n        var monthUTC = (today.getUTCMonth() + 1).toString(); \n        var yearUTC = today.getUTCFullYear().toString(); \n\n        if (dayUTC.length === 1) {\n            dayUTC = this.paddingLeftZeros(dayUTC);     \n        }\n        if (monthUTC.length === 1) {\n            monthUTC = this.paddingLeftZeros(monthUTC);\n        }\n\n        return this.format_date(yearUTC, monthUTC, dayUTC);\n      }\n\n      getTodayUTCTime(today) {\n        var hourUTC = today.getUTCHours().toString();\n        var minUTC = today.getUTCMinutes().toString();\n\n\n        if (hourUTC.length === 1) {\n            hourUTC = this.paddingLeftZeros(hourUTC);\n        }\n        if (minUTC.length === 1) {\n            minUTC = this.paddingLeftZeros(minUTC);\n        }\n\n\n        return this.format_time(hourUTC, minUTC);\n      }\n\n      getTodayUTCDateTime(today) {\n        return this.getTodayUTCDate (today) + \" \" + this.getTodayUTCTime(today); \n      }\n\n\n      getTodayLocalDate(today) {\n        var dayLocal = today.getDate().toString();\n        var monthLocal = (today.getMonth() + 1).toString();\n        var yearLocal = today.getFullYear().toString();\n\n        if (dayLocal.length === 1) {\n            dayLocal = this.paddingLeftZeros(dayLocal);\n        }\n        if (monthLocal.length === 1) {\n            monthLocal = this.paddingLeftZeros(monthLocal);\n        }\n\n        return this.format_date(yearLocal, monthLocal, dayLocal);\n      }\n\n      getTodayLocalTime(today) {\n        var hourLocal = today.getHours().toString();\n        var minLocal = today.getMinutes().toString();\n\n        if(hourLocal.length === 1) {\n            hourLocal = this.paddingLeftZeros(hourLocal);\n        }\n        if (minLocal.length === 1) {\n            minLocal = this.paddingLeftZeros(minLocal);\n        }\n\n\n        return this.format_time(hourLocal, minLocal);\n\n      }\n\n      getTodayLocalDateTime(today) {\n        return this.getTodayLocalDate(today) + \" \" + this.getTodayLocalTime(today);\n      }\n      \n\n      parseDetectionDate(detectionDate, local) {\n        const months = {\n            Jan: 0,\n            Feb: 1,\n            Mar: 2,\n            Apr: 3,\n            May: 4,\n            Jun: 5,\n            Jul: 6,\n            Aug: 7,\n            Sep: 8,\n            Oct: 9,\n            Nov: 10,\n            Dec: 11,\n          }\n\n        let datetime = detectionDate.split(\" \")\n        let date = datetime[0].split(\"-\")\n        let year = date[0];\n        let month =months[date[1]];\n        let day = date[2];\n\n        let time = datetime[1].split(\":\");\n        let hour = time[0];\n        let min = time[1]; \n        //alert(new Date(Date.UTC(year, month, day, hour, min) ) )\n        const parsed_date = new Date(Date.UTC(year, month, day, hour, min)); \n        if (local === true) {\n            return this.getTodayLocalDateTime(parsed_date);\n        }\n        else {\n            return this.getTodayUTCDateTime(parsed_date); \n        }\n      }\n\n\n    static api_key; \n    static start_date;\n    static end_date; \n    static url;\n\n\n    constructor(props) {\n        super(props);\n        this.api_key = process.env.REACT_APP_NASA_API_KEY; \n        this.start_date = this.getTodayUTCDate(new Date());\n        this.end_date = this.start_date; \n     \n        this.state = {\n            error: null, \n            isLoaded: false, \n            items: [], \n            currentLocalTime: null, \n            currentUTCTime: null\n        }\n\n    }\n\n    componentDidMount() {\n        const options = {\n            method: 'GET', \n            url: 'https://neo-today.herokuapp.com/neo', \n            params: {start_date: this.start_date, end_date: this.end_date}\n        }\n        \n\n        axios.request(options)\n        .then(\n            (result) => {\n                let res_order = [true, false]\n                let order = res_order.reduce((p, v, i) => Object.assign(p, {[v]: i} ),  {});\n                result.data.sort((a, b) => order[a.is_potentially_hazardous_asteroid] - order[b.is_potentially_hazardous_asteroid]);\n                const todaydate = new Date(); \n                this.setState({\n                    isLoaded: true, \n                    items: result.data, \n                    currentLocalTime: this.getTodayLocalDateTime(todaydate), \n                    currentUTCTime: this.getTodayUTCDateTime(todaydate)\n                });\n            }, \n        (error) => {\n            this.setState({\n                isLoaded: true, \n                error\n            }); \n        }\n\n\n\n        ) \n    }\n\n    render() {\n        const { error, isLoaded, items} = this.state; \n        if (error) {\n            return <div>error: {error.message}</div>; \n        } else if(!isLoaded) {\n            return <div>Loading ... </div>;\n        } else {\n            return (\n                <div id='bg'>\n                    <h1 className='center'>NEO (Asteroids)</h1>\n\n                    <div id=\"time\" className='left'>\n                        <h3>Curent time</h3>   \n        \n                        <span className='left'><b>Local time:</b> {this.state.currentLocalTime}</span>\n                        <span className='left'><b>UTC time:</b> {this.state.currentUTCTime}</span>\n                    </div>\n                <table>\n                    <thead>\n                        <tr>\n                            <td>Name</td>\n                            <td>Brightness (H)</td>\n                            <td>Estimated Diameter Minimum (Km)</td>\n                            <td>Estimated Diameter Maximum (km)</td>\n                            <td>Potentially Hazardous Asteroid?</td>\n                            <td>Date of Detection (UTC)</td>\n                            <td>Date of Detection (Local)</td>\n                            <td>How Fast? (Km/s)</td>\n                            <td>How Far From Us? (Km)</td>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    {\n                    items.map(item => (\n                        <tr key={item.id}>\n                            <td>{item.name}</td>\n                            <td>{item.absolute_magnitude_h}</td>\n                            <td>{item.estimated_diameter.kilometers.estimated_diameter_min} </td>\n                            <td>{item.estimated_diameter.kilometers.estimated_diameter_max}</td>\n                            <td className={item.is_potentially_hazardous_asteroid ? 'Red' : 'Green'}>{item.is_potentially_hazardous_asteroid ? 'Yes': 'No'}</td>\n                            <td>{this.parseDetectionDate(item.close_approach_data[0].close_approach_date_full, false)}</td>\n                            <td>{this.parseDetectionDate(item.close_approach_data[0].close_approach_date_full, true)}</td>\n                            <td>{item.close_approach_data[0].relative_velocity.kilometers_per_second}</td>\n                            <td>{item.close_approach_data[0].miss_distance.kilometers}</td>\n                        </tr>\n                    ))  }\n                    </tbody>\n                </table>\n                </div>\n\n            );\n        }\n    }\n}\n\nexport default NeoComponent;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport NeoComponent from './neo'\nimport reportWebVitals from './reportWebVitals';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nroot.render(\n        <NeoComponent/>\n);  \n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}